package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func getGeneratorPath(cfg *TomlConfig, filename string) string {
	cfgDir, _ := filepath.Split(cfg.misc.cfgPath)
	return filepath.Join(cfgDir, filename)
}

func createFile(cfg *TomlConfig, filename string) (*os.File, error) {
	return os.Create(getGeneratorPath(cfg, filename))
	//return os.OpenFile(getGeneratorPath(cfg, filename), os.O_RDWR|os.O_CREATE, 0660)
}

func GenerateCflags(cfg *TomlConfig) error {
	f, err := createFile(cfg, "slab.cflags")
	if err != nil {
		return err
	}
	defer f.Close()

	// it's empty, so just return

	return nil
}

func GenerateConfig(cfg *TomlConfig) error {
	f, err := createFile(cfg, "slab.config")
	if err != nil {
		return err
	}
	defer f.Close()

	body := "// generated by qtcdbg\n"
	for _, def := range cfg.Generate.ConfigDefines {
		body += fmt.Sprintf("#define %s\n", def)
	}

	f.WriteString(body)

	return nil
}
